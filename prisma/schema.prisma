// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// Generator and datasource as you provided
generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum CurrencyCode {
  GBP
  USD
  EUR
  CAD
  AUD
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  DEBIT_CARD
  INVESTMENT
  CASH
  OTHER
}

enum CategoryKind {
  INCOME
  EXPENSE
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum DebtType {
  CREDIT_CARD
  STUDENT_LOAN
  PERSONAL_LOAN
  MORTGAGE
  AUTO
  OTHER
}

enum PayFrequency {
  WEEKLY
  BIWEEKLY
  SEMI_MONTHLY
  MONTHLY
  EVERY_4_WEEKS
  CUSTOM
}

// ---------- Core ----------
model User {
  // Use Clerk user id as the primary key
  id        String  @id
  email     String?
  firstName String?
  lastName  String?

  currency CurrencyCode @default(GBP)
  timezone String       @default("Europe/London")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  categories        Category[]
  transactions      Transaction[]
  incomeSources     IncomeSource[]
  accounts          Account[]
  budgets           Budget[]
  savingsGoals      SavingsGoal[]
  goalContributions SavingsGoalContribution[]
  debts             Debt[]
  debtPayments      DebtPayment[]
  paySchedules      PaySchedule[]
}

// ---------- Categorization ----------
model Category {
  id         String       @id @default(cuid())
  userId     String
  name       String
  kind       CategoryKind
  color      String?
  icon       String?
  isArchived Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions     Transaction[]
  budgetCategories BudgetCategory[]

  @@unique([userId, name, kind])
  @@index([userId])
}

// ---------- Accounts ----------
model Account {
  id             String      @id @default(cuid())
  userId         String
  name           String // e.g., "Chase Checking", "Amex Credit Card"
  type           AccountType
  provider       String? // e.g., "Chase", "Amex", "Monzo"
  lastFourDigits String? // Last 4 digits for privacy
  isArchived     Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([userId, name])
  @@index([userId])
}

// Optional named income sources (e.g., "Salary", "Freelance")
model IncomeSource {
  id         String   @id @default(cuid())
  userId     String
  name       String
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([userId, name])
  @@index([userId])
}

// ---------- Money movement ----------
model Transaction {
  id          String          @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Decimal         @db.Decimal(14, 2)
  occurredAt  DateTime
  description String?
  currency    CurrencyCode    @default(GBP)

  // Optional classification
  categoryId     String?
  incomeSourceId String?
  accountId      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  category     Category?     @relation(fields: [categoryId], references: [id])
  incomeSource IncomeSource? @relation(fields: [incomeSourceId], references: [id])
  account      Account?      @relation(fields: [accountId], references: [id])

  @@index([userId, occurredAt])
  @@index([userId, type, occurredAt])
  @@index([userId, categoryId])
  @@index([userId, accountId])
}

// ---------- Savings ----------
model SavingsGoal {
  id            String    @id @default(cuid())
  userId        String
  name          String
  targetAmount  Decimal   @db.Decimal(14, 2)
  // Keep a cached currentAmount if you want quick reads
  currentAmount Decimal   @default(0) @db.Decimal(14, 2)
  deadline      DateTime?
  isArchived    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  contributions SavingsGoalContribution[]

  @@unique([userId, name])
  @@index([userId])
}

model SavingsGoalContribution {
  id         String   @id @default(cuid())
  userId     String
  goalId     String
  amount     Decimal  @db.Decimal(14, 2)
  occurredAt DateTime
  note       String?

  goal SavingsGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)
  user User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, occurredAt])
  @@index([goalId, occurredAt])
}

// ---------- Debt ----------
model Debt {
  id            String   @id @default(cuid())
  userId        String
  name          String
  type          DebtType @default(OTHER)
  balance       Decimal  @db.Decimal(14, 2)
  apr           Decimal? @db.Decimal(5, 2)
  minPayment    Decimal  @db.Decimal(14, 2)
  lender        String?
  dueDayOfMonth Int?
  isClosed      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments DebtPayment[]

  @@unique([userId, name])
  @@index([userId])
}

model DebtPayment {
  id         String   @id @default(cuid())
  userId     String
  debtId     String
  amount     Decimal  @db.Decimal(14, 2)
  occurredAt DateTime
  principal  Decimal? @db.Decimal(14, 2)
  interest   Decimal? @db.Decimal(14, 2)
  note       String?

  debt Debt @relation(fields: [debtId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([debtId, occurredAt])
  @@index([userId, occurredAt])
}

// ---------- Budgeting ----------
model Budget {
  id          String   @id @default(cuid())
  userId      String
  periodStart DateTime // e.g., 2025-08-01T00:00:00Z
  periodEnd   DateTime // e.g., 2025-08-31T23:59:59Z
  totalAmount Decimal  @db.Decimal(14, 2) // your monthlyBudget
  rollOver    Boolean  @default(false)
  note        String?

  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories BudgetCategory[]

  @@unique([userId, periodStart])
  @@index([userId, periodStart])
}

model BudgetCategory {
  id         String  @id @default(cuid())
  budgetId   String
  categoryId String
  amount     Decimal @db.Decimal(14, 2)

  budget   Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([budgetId, categoryId])
}

// ---------- Pay schedule ----------
model PaySchedule {
  id         String       @id @default(cuid())
  userId     String
  frequency  PayFrequency
  nextPayday DateTime
  anchorDate DateTime?
  dayOfMonth Int? // for monthly/semi-monthly
  timezone   String       @default("Europe/London")
  active     Boolean      @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, active])
}
