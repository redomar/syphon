
services:
  # Main Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: syphon-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=${DATABASE_URL}
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=${NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL}
      - NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=${NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL}
      - OTEL_SERVICE_NAME=syphon-app
      - OTEL_SERVICE_VERSION=${VERSION:-0.1.0}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318/v1/traces
      - OTEL_SDK_DISABLED=${OTEL_SDK_DISABLED:-false}
    ports:
      - "3010:3000"
    depends_on:
      database:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    networks:
      - syphon-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Service
  database:
    image: postgres:16-alpine
    container_name: syphon-database
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-syphon}
      - POSTGRES_USER=${POSTGRES_USER:-syphon}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-syphon123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - syphon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-syphon} -d ${POSTGRES_DB:-syphon}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Telemetry Service - Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: syphon-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - JAEGER_DISABLED=false
      - MEMORY_MAX_TRACES=${JAEGER_MAX_TRACES:-50000}
      - METRICS_BACKEND=prometheus
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    volumes:
      - jaeger_data:/tmp
    networks:
      - syphon-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Metrics Service - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: syphon-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - syphon-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  jaeger_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  syphon-network:
    driver: bridge